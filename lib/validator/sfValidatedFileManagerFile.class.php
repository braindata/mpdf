<?php

/**
 * sfValidatedFile represents a validated uploaded file.
 *
 * @package    symfony
 * @subpackage validator
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: sfValidatedFile.class.php 30915 2010-09-15 17:10:37Z Kris.Wallsmith $
 */
class sfValidatedFileManagerFile extends sfValidatedFile
{

  /**
   * Constructor.
   *
   * @param string $originalName  The original file name
   * @param string $type          The file content type
   * @param string $tempName      The absolute temporary path to the file
   * @param int    $size          The file size (in bytes)
   * @param string $path          The path to save the file (optional).
   */
  public function __construct($originalName, $type, $tempName, $size, $path = null)
  {
    parent::__construct($originalName, $type, $tempName, $size, $path);
    $this->FileManager = new sfFileManager();
  }

  /**
   * Saves the uploaded file to FileManager.
   *
   * This method can throw exceptions if there is a problem when saving the file.
   *
   * If you don't pass a file name, it will be generated by the generateFilename method.
   * This will only work if you have passed a path when initializing this instance.
   *
   * @param  string $file      The file path to save the file
   * @param  int    $fileMode  The octal mode to use for the new file
   * @param  bool   $create    Indicates that we should make the directory before moving the file
   * @param  int    $dirMode   The octal mode to use when creating the directory
   *
   * @return string The filename without the $this->path prefix
   *
   * @throws Exception
   */
  public function save($file = null, $fileMode = 0666, $create = true, $dirMode = 0777)
  {
    $options = array();
    if(sfConfig::get("app_max_upload_dim_w") OR sfConfig::get("app_max_upload_dim_h")) {
      $options['dim'] = array('w' => sfConfig::get("app_max_upload_dim_w"), 'h' => sfConfig::get("app_max_upload_dim_h"));
    }
    $this->savedName = $this->FileManager->save($this->tempName, $this->originalName, $this->type, $options);
    
    $this->size = $this->FileManager->getSize($this->savedName);
    $this->dim = $this->FileManager->getDim($this->savedName);

    return $this->savedName;
  }
  
  public static function getTypeFromName($filename){
    $finfo = finfo_open(FILEINFO_MIME_TYPE);
    return finfo_file($finfo, $filename);
  }
}
